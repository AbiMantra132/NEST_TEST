// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// For user account university
model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId 
  name          String
  firstName     String?
  lastName      String?
  email         String       
  student_id    String       @unique
  otp           String
  gender        String?
  role          Role
  password      String
  cohort        String
  profile       String?     
  majorId       String       @map("major_id")    @db.ObjectId
  createdAt     DateTime     @default(now())      @map("created_at")
  updatedAt     DateTime     @map("updated_at")
}


// For major university
model Major {
  id           String       @id @default(auto())  @map("_id") @db.ObjectId
  major        MajorType
}

// For User Competition University
model Competition {
  id              String       @id @default(auto())     @map("_id") @db.ObjectId 
  title           String    
  description     String?
  category        String    
  level           Level
  type            Type
  imagePoster     String?      @map("image_poster")
  startDate       DateTime     @map("start_date")
  endDate         DateTime     @map("end_date")
  linkGuidebook   String       @map("link_guidebook")
  linkPendaftaran String       @map("link_pendaftaran")
  createdAt       DateTime     @default(now())         @map("created_at")
  updatedAt       DateTime     @updatedAt              @map("updated_at")
}

model CompetitionParticipant {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String     @map("user_id") @db.ObjectId
  competitionId   String     @map("competition_id") @db.ObjectId
  teamId          String?   @map("team_id") @db.ObjectId
  reimburseStatus Reimburse?
  isLeader        Boolean     @default(false)
}

model Team {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  leaderId        String
  competitionId   String
  members         String[]   @map("members") @db.ObjectId
  openSlots       Int
  createdAt       DateTime    @default(now())
  endDate         DateTime
}


model Achievements {
  id              String    @id @default(auto())   @map("_id") @db.ObjectId
  userId          String    @map("user_id")        @db.ObjectId
  competitionId   String    @map("competition_id") @db.ObjectId
  rank            Rank
  certificate_url String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @map("updated_at") 
}

model Reimbursement {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  competitionId   String    @map("competition_id") @db.ObjectId
  userId          String    @map("user_id") @db.ObjectId
  amount          Int
  reason          String    
  status          Status
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @map("updated_at")
}

model History {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  competitionId   String
  status          String      // ongoing, completed
  isWinner        Boolean?
}

enum Level {
  Provinsi
  Nasional
  Internasional
}

enum Type {
  Individu
  Team
}

enum MajorType {
  INFORMATIKA
  SISTEM_INFORMASI
  SISTEM_INFORMASI_AKUNTANSI
  AKUNTANSI
  BISNIS_DIGITAL
  MANAJEMEN
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum Rank {
  PESERTA
  FINALIS
  JUARA_FAVORIT
  JUARA_3
  JUARA_2
  JUARA_1
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Reimburse {
  PENDING
  APPROVED
  REJECTED
}